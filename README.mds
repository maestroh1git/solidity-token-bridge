# solidity-token-bridge

 /**
const transferTx = await token.connect(bob.address).transfer(alice.address, 10);
const result = await transferTx.wait();
expect(result.events[0].args._from).to.equal(bob.address);
expect(result.events[0].args._to).to.equal(alice.address);
expect(result.events[0].args._value).to.equal(10);

await provider.send("evm_mine");
await new Promise(res => setTimeout(res, 5000))
 * 
 */

  /**
const tx = await tokenInstance.connect(<signer-account>).transfer(<addr-of-receipent>, <amount-BigNumber>);
const receipt = await ethers.provider.getTransactionReceipt(tx.hash);
const interface = new ethers.utils.Interface(["event Transfer(address indexed from, address indexed to, uint256 amount)"]);
const data = receipt.logs[0].data;
const topics = receipt.logs[0].topics;
const event = interface.decodeEventLog("Transfer", data, topics);
expect(event.from).to.equal(<addr-of-signer-account>);
expect(event.to).to.equal(<addr-of-receipent>);
expect(event.amount.toString()).to.equal(<amount-BigNumber>.toString());
 */

  /**
const destroyResult = await gameContract.attack([4, 0]);
// get all events of the tx
const { events } = await destroyResult.wait();
// filter events for 'GameEnd' 
const event = events.find(x => x.event === "GameEnd");
// get second arg which is the address
const ownerAddress = event.args[1];
// check if address is equal
expect(ownerAddress).to.be.equal(owner.address);
 */
